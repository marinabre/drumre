@model Projekt.Models.SearchViewModel

@{
    ViewBag.Title = "Search";
}

<!-- Include the plugin's CSS and JS: -->
@*<script type="text/javascript" src="~/Scripts/bootstrap-multiselect.js"></script>*@
@*<style rel="stylesheet" src="~/Content/bootstrap-chosen.css" type="text/css" ></style>*@
<link rel="stylesheet" href="bootstrap.css" />

<script src="~/Scripts/bootstrap-select.min.js"></script>
<script src="~/Scripts/jquery-3.1.1.min.js"></script>

<link href="~/Content/bootstrap-select.css" rel="stylesheet">
@Styles.Render("/Content/css")
<h2>Search</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <p class="text-info">
            When naming actors and directors split them using comma (,) - for instance:
            John Doe, Jane Doe
        </p>
        <div class="form-group">
            @Html.LabelFor(model => model.Actors, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Actors, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Actors, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Directors, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Directors, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Directors, "", new { @class = "text-danger" })
            </div>
        </div>

        @{
            List<SelectListItem> genresToChoose = ViewBag.genres;
        }
        <div class="form-group">
            @Html.LabelFor(model => model.Genres, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Genres", genresToChoose, htmlAttributes: new { @class = "selectpicker", multiple = "multiple", tabindex = "4" })

            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-1"></div>
                <h4 class="col-md-3">Runtime</h4>
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.RuntimeFrom, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.RuntimeFrom, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.RuntimeTo, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.RuntimeTo, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>
        </div>


        <div class="form-group">
            <div class="row">
                <div class="col-md-1"></div>
                <h4 class="col-md-3">Year</h4>
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.YearFrom, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.YearFrom, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.YearTo, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.YearTo, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>
        </div>


        <div class="form-group">
            <div class="row">
                <div class="col-md-1"></div>
                <h4 class="col-md-3">IMDB Rating</h4>
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.IMDBRatingFrom, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.IMDBRatingFrom, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.IMDBRatingTo, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.IMDBRatingTo, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-1"></div>
                <h4 class="col-md-3">Metascore Rating</h4>
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.MetascoreRatingFrom, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.MetascoreRatingFrom, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.MetascoreRatingTo, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.MetascoreRatingTo, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-1"></div>
                <h4 class="col-md-3">Tomato Rating</h4>
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.TomatoRatingFrom, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.TomatoRatingFrom, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.TomatoRatingTo, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.TomatoRatingTo, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-1"></div>
                <h4 class="col-md-3">Facebook Shares</h4>
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.FBSharesFrom, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.FBSharesFrom, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.FBSharesTo, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.FBSharesTo, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-1"></div>
                <h4 class="col-md-3">Facebook Likes</h4>
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.FBLikesFrom, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.FBLikesFrom, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.FBLikesTo, htmlAttributes: new { @class = "control-label col-md-3" })
                @Html.EditorFor(model => model.FBLikesTo, new { htmlAttributes = new { @class = "form-control col-md-3" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
            }

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}
